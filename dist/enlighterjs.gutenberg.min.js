/*! EnlighterJS Syntax Highlighter Gutenberg Plugin 1.1.0 | Mozilla Public License 2.0 | https://enlighterjs.org */
var EnlighterJS_Gutenberg = (function (exports) {
    'use strict';

    // wrapper..

    /*eslint no-undef: 0 */
    var Editor = wp.editor;
    var Components = wp.components;
    var Element = wp.element;
    var BlockEditor = wp.blockEditor;
    var Blocks = wp.blocks;
    var RichText = wp.richText;
    var EscapeHtml = wp.escapeHtml;

    // ----------------------------------------------------------------------

    var _TextEditor = Editor.PlainText;

    // wrapper..

    /*eslint no-undef: 0 */
    var _editorConfig = EnlighterJS_EditorConfig; // get list of available themes

    function getThemes() {
      // add default theme (selected globally)
      var themes = {
        '': 'Global settings (' + _editorConfig.config.theme + ')'
      }; // add themes from config

      Object.assign(themes, _editorConfig.themes);
      return themes;
    } // get list of available languages

    function getLanguages() {
      var languages = {}; // add languages from config

      Object.assign(languages, _editorConfig.languages);
      return languages;
    } // global plugin config

    // ----------------------------------------------------------------------

    function LanguageMenu(_ref) {
      var onChange = _ref.onChange,
          value = _ref.value;
      // get language list
      var languages = getLanguages(); // generate dropdown list

      var languageItemList = Object.keys(languages).map(function (key) {
        // extract language label
        var label = languages[key];
        return {
          title: label,
          // current item active ?
          isActive: value === key,
          // passthrough
          onClick: function onClick() {
            return onChange(key);
          }
        };
      }); // create dropdown menu

      return wp.element.createElement(Components.DropdownMenu, {
        className: "enlighter-dropdownmenu",
        icon: "editor-paste-text",
        label: "Select Language",
        controls: languageItemList
      });
    }

    // ----------------------------------------------------------------------

    function LanguageSelect(_ref) {
      var onChange = _ref.onChange,
          value = _ref.value;
      // get language list
      var languages = getLanguages(); // generate dropdown list

      var languageItemList = Object.keys(languages).map(function (key) {
        // extract language label
        var label = languages[key];
        return {
          label: label,
          value: key
        };
      }); // create dropdown menu

      return wp.element.createElement(Components.SelectControl, {
        label: "Language",
        value: value,
        onChange: onChange,
        options: languageItemList
      });
    }

    // ----------------------------------------------------------------------

    function ThemeSelect(_ref) {
      var onChange = _ref.onChange,
          value = _ref.value;
      // get themes
      var themes = getThemes(); // generate dropdown list

      var themeItemList = Object.keys(themes).map(function (key) {
        // extract theme label
        var label = themes[key];
        return {
          label: label,
          value: key
        };
      }); // create dropdown menu

      return wp.element.createElement(Components.SelectControl, {
        label: "Theme",
        value: value,
        onChange: onChange,
        options: themeItemList
      });
    }

    // ----------------------------------------------------------------------

    function getLanguageLabel(key) {
      var langs = getLanguages();

      if (langs[key]) {
        return langs[key];
      } else {
        return 'Unknown language';
      }
    }

    // ----------------------------------------------------------------------

    function edit(_ref) {
      var attributes = _ref.attributes,
          setAttributes = _ref.setAttributes;
      // use standard Gutenberg PlainText View with custom styles
      return wp.element.createElement(Element.Fragment, null, wp.element.createElement(Editor.BlockControls, null, wp.element.createElement(Components.Toolbar, null, wp.element.createElement(LanguageMenu, {
        value: attributes.language,
        onChange: function onChange(language) {
          return setAttributes({
            language: language
          });
        }
      }))), wp.element.createElement("div", {
        className: "enlighter-block-wrapper"
      }, wp.element.createElement("div", {
        className: "enlighter-header"
      }, wp.element.createElement("div", {
        className: "enlighter-title"
      }, getLanguageLabel(attributes.language))), wp.element.createElement(_TextEditor, {
        value: attributes.content,
        onChange: function onChange(content) {
          return setAttributes({
            content: content
          });
        },
        placeholder: "Insert Sourcecode..",
        "aria-label": "Code"
      }), wp.element.createElement("div", {
        className: "enlighter-footer"
      }, wp.element.createElement("div", {
        className: "enlighter-footer-label"
      }, wp.element.createElement("strong", null, "EnlighterJS"), " Syntax Highlighter"))), wp.element.createElement(Editor.InspectorControls, null, wp.element.createElement(Components.PanelBody, {
        title: "Appearance",
        icon: "admin-appearance"
      }, wp.element.createElement("p", null, "Override the global plugin settings of the current block."), wp.element.createElement(LanguageSelect, {
        value: attributes.language,
        onChange: function onChange(language) {
          return setAttributes({
            language: language
          });
        }
      }), wp.element.createElement(Components.TextControl, {
        label: "Speciallines",
        value: attributes.highlight,
        onChange: function onChange(highlight) {
          return setAttributes({
            highlight: highlight
          });
        },
        placeholder: "1,2,20-22"
      }), wp.element.createElement(Components.TextControl, {
        label: "Lineoffset",
        value: attributes.lineoffset,
        onChange: function onChange(lineoffset) {
          return setAttributes({
            lineoffset: lineoffset
          });
        },
        placeholder: "314"
      }), wp.element.createElement(ThemeSelect, {
        value: attributes.theme,
        onChange: function onChange(theme) {
          return setAttributes({
            theme: theme
          });
        }
      }), wp.element.createElement(Components.RadioControl, {
        label: "Linenumbers",
        selected: attributes.linenumbers,
        options: [{
          label: 'Global settings',
          value: ''
        }, {
          label: 'Show',
          value: 'true'
        }, {
          label: 'Hide',
          value: 'false'
        }],
        onChange: function onChange(linenumbers) {
          return setAttributes({
            linenumbers: linenumbers
          });
        }
      })), wp.element.createElement(Components.PanelBody, {
        title: "Codegroup",
        initialOpen: false,
        icon: "excerpt-view"
      }, wp.element.createElement("p", null, "Create a group of multiple codeblocks by setting a unique group identifier."), wp.element.createElement(Components.TextControl, {
        label: "Title",
        value: attributes.title,
        onChange: function onChange(title) {
          return setAttributes({
            title: title
          });
        },
        placeholder: "My Codeblock"
      }), wp.element.createElement(Components.TextControl, {
        label: "Group Identifier",
        value: attributes.group,
        onChange: function onChange(group) {
          return setAttributes({
            group: group
          });
        },
        placeholder: "mygroup-1"
      }))));
    }

    // ----------------------------------------------------------------------

    var _transforms = {
      from: [// allow transform from RAW DOM <pre><code> (legacy syntax highlighting)
      // higher priority then 'core/preformatted'
      // automatically applied when transforming from legacy to blocks
      {
        type: 'raw',
        priority: 4,
        isMatch: function isMatch(node) {
          return node.nodeName === 'PRE' && node.children.length === 1 && node.firstChild.nodeName === 'CODE';
        },
        transform: function transform(node) {
          // use inner text as content
          return Blocks.createBlock('enlighter/codeblock', {
            content: node.textContent
          });
        }
      }, // allow transform from standard EnlighterJS code to blocks
      // higher priority then 'core/preformatted'
      // automatically applied when transforming from legacy to blocks
      {
        type: 'raw',
        priority: 4,
        // match element type PRE and class=EnlighterJSRAW
        isMatch: function isMatch(node) {
          return node.nodeName === 'PRE' && node.className === 'EnlighterJSRAW';
        },
        transform: function transform(node) {
          // use inner text as content
          // convert html data-enlighter attributes to block attributes/state
          return Blocks.createBlock('enlighter/codeblock', {
            content: node.textContent,
            language: node.dataset.enlighterLanguage || '',
            theme: node.dataset.enlighterTheme || '',
            highlight: node.dataset.enlighterHighlight || '',
            linenumbers: node.dataset.enlighterLinenumbers || '',
            lineoffset: node.dataset.enlighterLineoffset || '',
            title: node.dataset.enlighterTitle || '',
            group: node.dataset.enlighterGroup || ''
          });
        }
      }, // allow transform from core/code block
      // allow transform from core/preformatted block
      // allow transform from core/paragraph block
      // @TODO remove content formattings (convert to text!)
      {
        type: 'block',
        blocks: ['core/code', 'core/preformatted', 'core/paragraph'],
        transform: function transform(_ref) {
          var content = _ref.content;
          return Blocks.createBlock('enlighter/codeblock', {
            content: content
          });
        }
      }],
      to: [// allow transform to core/code block
      {
        type: 'block',
        blocks: ['core/code'],
        transform: function transform(_ref2) {
          var content = _ref2.content;
          return Blocks.createBlock('core/code', {
            content: content
          });
        }
      }, // allow transform to core/preformatted block
      {
        type: 'block',
        blocks: ['core/preformatted'],
        transform: function transform(_ref3) {
          var content = _ref3.content;
          return Blocks.createBlock('core/preformatted', {
            content: content
          });
        }
      }]
    };

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2018 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------
    // @see https://wordpress.org/gutenberg/handbook/block-api/attributes/
    var _attributes = {
      // extract sourcecode from saved (html) content
      content: {
        type: 'string',
        selector: 'pre.EnlighterJSRAW',
        source: 'text'
      },
      // Extract EnlighterJS related attributes
      // use type attribute instead of query for easier handling
      language: {
        type: 'attribute',
        attribute: 'data-enlighter-language',
        default: 'generic'
      },
      theme: {
        type: 'attribute',
        attribute: 'data-enlighter-theme',
        default: ''
      },
      highlight: {
        type: 'attribute',
        attribute: 'data-enlighter-highlight',
        default: ''
      },
      linenumbers: {
        type: 'attribute',
        attribute: 'data-enlighter-linenumbers',
        default: ''
      },
      lineoffset: {
        type: 'attribute',
        attribute: 'data-enlighter-lineoffset',
        default: ''
      },
      title: {
        type: 'attribute',
        attribute: 'data-enlighter-title',
        default: ''
      },
      group: {
        type: 'attribute',
        attribute: 'data-enlighter-group',
        default: ''
      }
    };

    // ----------------------------------------------------------------------

    var _codeblock = {
      // metadata
      title: 'Enlighter Sourcecode',
      description: 'Syntax highlighting with EnlighterJS.',
      icon: 'editor-code',
      category: 'formatting',
      keywords: ['code', 'sourcecode', 'enlighter'],
      // internal block state
      attributes: _attributes,
      // block transformations
      transforms: _transforms,
      // extended block support features
      // @see https://wordpress.org/gutenberg/handbook/block-api/#supports-optional
      supports: {
        // allow custom classes (>=1.0.0)
        customClassName: true,
        // remove auto generated wrapper classname
        className: false,
        // disable html edit mode
        html: false
      },
      // handle deprecated blocks (previous plugin version)
      // @see https://wordpress.org/gutenberg/handbook/block-api/deprecated-blocks/
      deprecated: [],
      // show editing ui
      edit: edit,
      // render element as html
      // @BUG https://github.com/WordPress/gutenberg/issues/8532
      // @TODO use custom validator 
      save: function render(_ref) {
        var attributes = _ref.attributes,
            className = _ref.className;
        // generate css class list
        var cssClasses = 'EnlighterJSRAW' + (className ? ' ' + className : ''); // add enlighterjs related attributes

        return wp.element.createElement("pre", {
          className: cssClasses,
          "data-enlighter-language": attributes.language,
          "data-enlighter-theme": attributes.theme,
          "data-enlighter-highlight": attributes.highlight,
          "data-enlighter-linenumbers": attributes.linenumbers,
          "data-enlighter-lineoffset": attributes.lineoffset,
          "data-enlighter-title": attributes.title,
          "data-enlighter-group": attributes.group
        }, EscapeHtml.escapeEditableHTML(attributes.content));
      }
    };

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf(o, p);
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (typeof call === "object" || typeof call === "function")) {
        return call;
      }

      return _assertThisInitialized(self);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    var EnlighterInlineCodeEdit = /*#__PURE__*/function (_Element$Component) {
      _inherits(EnlighterInlineCodeEdit, _Element$Component);

      var _super = _createSuper(EnlighterInlineCodeEdit);

      function EnlighterInlineCodeEdit() {
        _classCallCheck(this, EnlighterInlineCodeEdit);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _super.call.apply(_super, [this].concat(args));
      } // format block


      _createClass(EnlighterInlineCodeEdit, [{
        key: "createFormat",
        value: function createFormat(lang) {
          return {
            type: 'enlighter/richtext-inline',
            attributes: {
              language: lang
            }
          };
        } // set element language via dropdown

      }, {
        key: "onChangeLanguage",
        value: function onChangeLanguage(lang) {
          // apply format to current selection
          this.props.onChange(RichText.applyFormat(this.props.value, this.createFormat(lang)));
        } // toggle format via toolbar (on/off)

      }, {
        key: "toggleFormatting",
        value: function toggleFormatting() {
          // trigger change
          this.props.onChange(RichText.toggleFormat(this.props.value, this.createFormat('generic')));
        }
      }, {
        key: "render",
        value: function render() {
          // try to get range as reference
          var sel = this.props.isActive && window.getSelection();
          var anchorRef = sel && sel.getRangeAt(0); // try to get language attribute

          var currentLanguage = this.props.activeAttributes.language || 'generic';
          return wp.element.createElement(Element.Fragment, null, wp.element.createElement(BlockEditor.BlockFormatControls, null, wp.element.createElement(BlockEditor.RichTextToolbarButton, {
            icon: "editor-code",
            title: "Enlighter Inline Code",
            onClick: this.toggleFormatting.bind(this),
            isActive: this.props.isActive
          })), this.props.isActive && wp.element.createElement(Components.Popover, {
            position: "bottom center",
            anchorRef: anchorRef,
            className: "enlighter-popover-inline"
          }, wp.element.createElement("div", {
            className: "enlighter-popover-content"
          }, wp.element.createElement(LanguageSelect, {
            value: currentLanguage,
            onChange: this.onChangeLanguage.bind(this)
          }), wp.element.createElement("div", {
            className: "enlighter-popover-buttons"
          }, wp.element.createElement(Components.Button, {
            isSecondary: true,
            isSmall: true,
            onClick: this.toggleFormatting.bind(this)
          }, "Clear"))), wp.element.createElement("div", {
            className: "enlighter-popover-footer"
          }, wp.element.createElement("small", null, "EnlighterJS Syntax Highlighter"))));
        }
      }]);

      return EnlighterInlineCodeEdit;
    }(Element.Component);

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2020 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------
    var _attributes$1 = {
      language: 'data-enlighter-language'
    };

    // ----------------------------------------------------------------------

    var _inlineFormats = {
      // metadata
      title: 'Enlighter Inline Sourcecode',
      tagName: 'code',
      className: 'EnlighterJSRAW',
      // internal block state
      attributes: _attributes$1,
      // show editing ui
      edit: EnlighterInlineCodeEdit
    };

    // ----------------------------------------------------------------------

    Blocks.registerBlockType('enlighter/codeblock', _codeblock); // Register Enlighter formats

    RichText.registerFormatType('enlighter/richtext-inline', _inlineFormats); // static properties

    var version = '1.1.0';

    exports.version = version;

    return exports;

}({}));
