/*! EnlighterJS Syntax Highlighter Gutenberg Plugin 1.0.0 | Mozilla Public License 2.0 | https://enlighterjs.org */
var EnlighterJS_Gutenberg = (function (exports) {
    'use strict';

    // wrapper..

    /*eslint no-undef: 0 */
    var Editor = wp.editor;
    var Components = wp.components;
    var Element = wp.element;
    var Blocks = wp.blocks;

    // ----------------------------------------------------------------------

    // alias
    var _TextEditor = Editor.PlainText;

    // wrapper..

    // ----------------------------------------------------------------------

    // create a language selection menu
    function LanguageMenu(_ref) {
        var onChange = _ref.onChange,
            value = _ref.value;


        // generate dropdown list
        var languageItemList = Object.keys(EnlighterJS_EditorConfig.languages).map(function (label) {

            // extract language identifier
            var languageIdentifier = EnlighterJS_EditorConfig.languages[label];

            return {
                title: label,

                // current item active ?
                isActive: value === languageIdentifier,

                // passthrough
                onClick: function onClick() {
                    return onChange(languageIdentifier);
                }
            };
        });

        // create dropdown menu
        return wp.element.createElement(Components.DropdownMenu, {
            className: 'enlighter-dropdownmenu',
            icon: 'editor-paste-text',
            label: 'Select Language',
            controls: languageItemList
        });
    }

    // ----------------------------------------------------------------------

    // create a language selection menu
    function LanguageSelect(_ref) {
        var onChange = _ref.onChange,
            value = _ref.value;


        // generate dropdown list
        var languageItemList = Object.keys(EnlighterJS_EditorConfig.languages).map(function (label) {

            // extract language identifier
            var languageIdentifier = EnlighterJS_EditorConfig.languages[label];

            return {
                label: label,
                value: languageIdentifier
            };
        });

        // create dropdown menu
        return wp.element.createElement(Components.SelectControl, {
            label: 'Language',
            value: value,
            onChange: onChange,
            options: languageItemList
        });
    }

    // ----------------------------------------------------------------------

    // create a theme selection menu
    function ThemeSelect(_ref) {
        var onChange = _ref.onChange,
            value = _ref.value;


        // generate dropdown list
        var themeItemList = Object.keys(EnlighterJS_EditorConfig.themes).map(function (label) {

            // extract theme identifier
            var themeIdentifier = EnlighterJS_EditorConfig.themes[label];

            return {
                label: label,
                value: themeIdentifier
            };
        });

        // create dropdown menu
        return wp.element.createElement(Components.SelectControl, {
            label: 'Theme',
            value: value,
            onChange: onChange,
            options: themeItemList
        });
    }

    // ----------------------------------------------------------------------

    // get object key by value
    function getLanguageLabel(lang) {
        return Object.keys(EnlighterJS_EditorConfig.languages).find(function (key) {
            return EnlighterJS_EditorConfig.languages[key] === lang;
        });
    }

    // ----------------------------------------------------------------------

    // Standard Codeblock
    var _codeblock = {

        // metadata
        title: 'Enlighter Sourcecode',
        description: 'Syntax highlighting with EnlighterJS.',
        icon: 'editor-code',
        category: 'formatting',
        keywords: ['code', 'sourcecode', 'enlighter'],

        // internal block state
        // @see https://wordpress.org/gutenberg/handbook/block-api/attributes/
        attributes: {
            // extract sourcecode from saved (html) content
            content: {
                type: 'string',
                selector: 'pre.EnlighterJSRAW',
                source: 'text'
            },

            // Extract EnlighterJS related attributes
            // use type attribute instead of query for easier handling
            language: {
                type: 'attribute',
                attribute: 'data-enlighter-language',
                default: 'generic'
            },

            theme: {
                type: 'attribute',
                attribute: 'data-enlighter-theme',
                default: ''
            },

            highlight: {
                type: 'attribute',
                attribute: 'data-enlighter-highlight',
                default: ''
            },

            linenumbers: {
                type: 'attribute',
                attribute: 'data-enlighter-linenumbers',
                default: ''
            },

            lineoffset: {
                type: 'attribute',
                attribute: 'data-enlighter-lineoffset',
                default: ''
            },

            title: {
                type: 'attribute',
                attribute: 'data-enlighter-title',
                default: ''
            }
        },

        // extended block support features
        // @see https://wordpress.org/gutenberg/handbook/block-api/#supports-optional
        supports: {
            // no custom classes
            customClassName: false,

            // remove auto generated wrapper classname
            className: false,

            // disable html edit mode
            html: false
        },

        // block element transformation/converting
        transforms: {
            from: [

            // allow transform from RAW DOM <pre><code> (legacy syntax highlighting)
            // higher priority then 'core/preformatted'
            // automatically applied when transforming from legacy to blocks
            {
                type: 'raw',
                priority: 4,
                isMatch: function isMatch(node) {
                    return node.nodeName === 'PRE' && node.children.length === 1 && node.firstChild.nodeName === 'CODE';
                },
                transform: function transform(node) {
                    // use inner text as content
                    return Blocks.createBlock('enlighter/codeblock', { content: node.textContent });
                }
            },

            // allow transform from standard EnlighterJS code to blocks
            // higher priority then 'core/preformatted'
            // automatically applied when transforming from legacy to blocks
            // @BUG https://github.com/WordPress/gutenberg/issues/8648
            // @TODO re-enable transform and use attribute matching
            /*
            {
                type: 'raw',
                priority: 4,
                isMatch: function(node){
                    return  false;
                },
                transform: function (node){
                    // use inner text as content
                    return _wp.blocks.createBlock('enlighter/codeblock', {content: node.textContent});
                },
            },
            */

            // allow transform from core/code block
            // allow transform from core/preformatted block
            // allow transform from core/paragraph block
            {
                type: 'block',
                blocks: ['core/code', 'core/preformatted', 'core/paragraph'],
                transform: function transform(_ref) {
                    var content = _ref.content;

                    return Blocks.createBlock('enlighter/codeblock', { content: content });
                }
            }],

            to: [
            // allow transform to core/code block
            {
                type: 'block',
                blocks: ['core/code'],
                transform: function transform(_ref2) {
                    var content = _ref2.content;

                    return Blocks.createBlock('core/code', { content: content });
                }
            },

            // allow transform to core/preformatted block
            {
                type: 'block',
                blocks: ['core/preformatted'],
                transform: function transform(_ref3) {
                    var content = _ref3.content;

                    return Blocks.createBlock('core/preformatted', { content: content });
                }
            }]
        },

        // The "edit" property must be a valid function.
        edit: function ui(_ref4) {
            var attributes = _ref4.attributes,
                setAttributes = _ref4.setAttributes;


            // use standard Gutenberg PlainText View with custom styles
            return wp.element.createElement(
                Element.Fragment,
                null,
                wp.element.createElement(
                    Editor.BlockControls,
                    null,
                    wp.element.createElement(
                        Components.Toolbar,
                        null,
                        wp.element.createElement(LanguageMenu, { value: attributes.language, onChange: function onChange(language) {
                                return setAttributes({ language: language });
                            } })
                    )
                ),
                wp.element.createElement(
                    'div',
                    { className: 'enlighter-block-wrapper' },
                    wp.element.createElement(
                        'div',
                        { className: 'enlighter-header' },
                        wp.element.createElement(
                            'div',
                            { className: 'enlighter-title' },
                            getLanguageLabel(attributes.language)
                        )
                    ),
                    wp.element.createElement(_TextEditor, {
                        value: attributes.content,
                        onChange: function onChange(content) {
                            return setAttributes({ content: content });
                        },
                        placeholder: 'Insert Sourcecode..',
                        'aria-label': 'Code'
                    }),
                    wp.element.createElement(
                        'div',
                        { className: 'enlighter-footer' },
                        wp.element.createElement(
                            'div',
                            { className: 'enlighter-footer-label' },
                            wp.element.createElement(
                                'strong',
                                null,
                                'EnlighterJS'
                            ),
                            ' Syntax Highlighter'
                        )
                    )
                ),
                wp.element.createElement(
                    Editor.InspectorControls,
                    null,
                    wp.element.createElement(
                        Components.PanelBody,
                        { title: 'Appearance' },
                        wp.element.createElement(
                            'p',
                            null,
                            'Override the global plugin settings of the current block.'
                        ),
                        wp.element.createElement(LanguageSelect, { value: attributes.language, onChange: function onChange(language) {
                                return setAttributes({ language: language });
                            } }),
                        wp.element.createElement(ThemeSelect, { value: attributes.theme, onChange: function onChange(theme) {
                                return setAttributes({ theme: theme });
                            } }),
                        wp.element.createElement(Components.ToggleControl, {
                            label: 'Linenumbers',
                            checked: attributes.linenumbers,
                            onChange: function onChange(linenumbers) {
                                return setAttributes({ linenumbers: linenumbers });
                            }
                        })
                    )
                )
            );
        },

        // render element as html
        // @BUG https://github.com/WordPress/gutenberg/issues/8532
        // @TODO use custom validator 
        save: function render(_ref5) {
            var attributes = _ref5.attributes;

            // add enlighterjs related attributes
            return wp.element.createElement(
                'pre',
                {
                    className: 'EnlighterJSRAW',
                    'data-enlighter-language': attributes.language,
                    'data-enlighter-theme': attributes.theme,
                    'data-enlighter-highlight': attributes.highlight,
                    'data-enlighter-linenumbers': attributes.linenumbers,
                    'data-enlighter-lineoffset': attributes.lineoffset,
                    'data-enlighter-title': attributes.title
                },
                attributes.content
            );
        }
    };

    // ----------------------------------------------------------------------

    // Register Enlighter Blockcode
    Blocks.registerBlockType('enlighter/codeblock', _codeblock);

    // static properties
    var version = '1.0.0';

    exports.version = version;

    return exports;

}({}));
