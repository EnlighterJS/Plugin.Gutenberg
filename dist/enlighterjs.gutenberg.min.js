/*! EnlighterJS Syntax Highlighter Gutenberg Plugin 1.0.0 | Mozilla Public License 2.0 | https://enlighterjs.org */
var EnlighterJS_Gutenberg = (function (exports) {
   'use strict';

   // wrapper..

   // ----------------------------------------------------------------------

   // alias
   var _TextEditor = wp.editor.PlainText;

   // ----------------------------------------------------------------------

   var _Toolbar = wp.editor.BlockControls;

   // ----------------------------------------------------------------------

   // Standard Codeblock
   var _codeblock = {

       // metadata
       title: 'Enlighter Sourcecode',
       icon: 'editor-code',
       category: 'formatting',
       keywords: ['code', 'sourcecode', 'enlighter'],

       // internal block state
       // @see https://wordpress.org/gutenberg/handbook/block-api/attributes/
       attributes: {
           // extract sourcecode from saved (html) content
           content: {
               type: 'string',
               selector: 'pre.EnlighterJSRAW',
               source: 'text'
           },

           config: {
               source: 'query',
               selector: 'pre.EnlighterJSRAW',
               query: {
                   language: { source: 'attribute', attribute: 'data-enlighter-language', default: 'generic' },
                   theme: { source: 'attribute', attribute: 'data-enlighter-theme', default: null },
                   highlight: { source: 'attribute', attribute: 'data-enlighter-highlight', default: null },
                   linenumbers: { source: 'attribute', attribute: 'data-enlighter-linenumbers', default: null },
                   lineoffset: { source: 'attribute', attribute: 'data-enlighter-lineoffset', default: null },
                   title: { source: 'attribute', attribute: 'data-enlighter-title', default: null }
               }
           }
       },

       // extended block support features
       // @see https://wordpress.org/gutenberg/handbook/block-api/#supports-optional
       supports: {
           // no custom classes
           customClassName: false,

           // remove auto generated wrapper classname
           className: false,

           // disable html edit mode
           html: false
       },

       // block element transformation/converting
       transforms: {
           from: [
           // allow transform from RAW DOM <pre> node
           {
               type: 'raw',
               isMatch: function isMatch(node) {
                   return node.nodeName === 'PRE' && node.children.length === 1;
               },
               schema: {
                   pre: {
                       children: {
                           '#text': {}
                       }
                   }
               }
           },

           // allow transform from core/code block
           // allow transform from core/preformatted block
           // allow transform from core/paragraph block
           {
               type: 'block',
               blocks: ['core/code', 'core/preformatted', 'core/paragraph'],
               transform: function transform(_ref) {
                   var content = _ref.content;

                   return wp.blocks.createBlock('enlighter/codeblock', { content: content });
               }
           }],

           to: [
           // allow transform to core/code block
           {
               type: 'block',
               blocks: ['core/code'],
               transform: function transform(_ref2) {
                   var content = _ref2.content;

                   return wp.blocks.createBlock('core/code', { content: content });
               }
           },

           // allow transform to core/preformatted block
           {
               type: 'block',
               blocks: ['core/preformatted'],
               transform: function transform(_ref3) {
                   var content = _ref3.content;

                   return wp.blocks.createBlock('core/preformatted', { content: content });
               }
           }]
       },

       // The "edit" property must be a valid function.
       edit: function blockEdit(_ref4) {
           var attributes = _ref4.attributes,
               setAttributes = _ref4.setAttributes;


           // use standard Gutenberg PlainText View with custom styles
           return [wp.element.createElement(_Toolbar, { key: 'controls' }),

           // outer container
           wp.element.createElement(
               'div',
               { className: 'enlighter-block-wrapper' },
               wp.element.createElement(
                   'div',
                   { className: 'enlighter-header' },
                   wp.element.createElement(
                       'div',
                       { className: 'enlighter-title' },
                       'Javascript'
                   )
               ),
               wp.element.createElement(_TextEditor, {
                   value: attributes.content,
                   onChange: function onChange(content) {
                       return setAttributes({ content: content });
                   },
                   placeholder: 'Insert Sourcecode..',
                   'aria-label': 'Code'
               }),
               wp.element.createElement(
                   'div',
                   { className: 'enlighter-footer' },
                   wp.element.createElement(
                       'div',
                       { className: 'enlighter-footer-label' },
                       wp.element.createElement(
                           'strong',
                           null,
                           'EnlighterJS'
                       ),
                       ' Syntax Highlighter'
                   )
               )
           )];
       },

       // render element as html
       save: function blockRender(_ref5) {
           var attributes = _ref5.attributes;

           console.log(attributes);
           // add enlighterjs related attributes
           return wp.element.createElement(
               'pre',
               {
                   className: 'EnlighterJSRAW'
               },
               attributes.content
           );
       }
   };

   // ----------------------------------------------------------------------

   // Register Enlighter Blockcode
   wp.blocks.registerBlockType('enlighter/codeblock', _codeblock);

   // static properties
   var version = '1.0.0';

   exports.version = version;

   return exports;

}({}));
