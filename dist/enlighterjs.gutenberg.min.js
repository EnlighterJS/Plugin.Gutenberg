/*! EnlighterJS Syntax Highlighter Gutenberg Plugin 1.0.0 | Mozilla Public License 2.0 | https://enlighterjs.org */
var EnlighterJS_Gutenberg = (function (exports) {
    'use strict';

    // wrapper..

    // ----------------------------------------------------------------------

    // alias
    var _TextEditor = wp.editor.PlainText;

    // ----------------------------------------------------------------------

    // Standard Codeblock
    var _codeblock = {

        // metadata
        title: 'Enlighter Sourcecode',
        icon: 'editor-code',
        category: 'formatting',
        keywords: ['code', 'sourcecode', 'enlighter'],

        // internal block state
        // @see https://wordpress.org/gutenberg/handbook/block-api/attributes/
        attributes: {
            // extract sourcecode from saved (html) content
            content: {
                type: 'string',
                selector: 'pre.EnlighterJSRAW',
                source: 'text'
            }
        },

        // extended block support features
        // @see https://wordpress.org/gutenberg/handbook/block-api/#supports-optional
        supports: {
            // no custom classes
            customClassName: false,

            // remove auto generated wrapper classname
            className: false,

            // disable html edit mode
            html: false
        },

        // allow transform from RAW DOM <pre> node
        transforms: {
            from: [{
                type: 'raw',
                isMatch: function isMatch(node) {
                    return node.nodeName === 'PRE' && node.children.length === 1;
                },
                schema: {
                    pre: {
                        children: {
                            '#text': {}
                        }
                    }
                }
            }]
        },

        // The "edit" property must be a valid function.
        edit: function blockEdit(_ref) {
            var attributes = _ref.attributes,
                setAttributes = _ref.setAttributes,
                className = _ref.className;


            // use standard Gutenberg PlainText View with custom styles
            return (
                // outer container
                wp.element.createElement(
                    'div',
                    { className: className },
                    wp.element.createElement(_TextEditor, {
                        value: attributes.content,
                        onChange: function onChange(content) {
                            return setAttributes({ content: content });
                        },
                        placeholder: 'Insert Sourcecode..',
                        'aria-label': 'Code'
                    }),
                    wp.element.createElement(
                        'div',
                        { className: 'enlighter-footer-label' },
                        wp.element.createElement(
                            'small',
                            null,
                            'EnlighterJS Syntax Highlighter'
                        )
                    )
                )
            );
        },

        // render element as html
        save: function blockRender(_ref2) {
            var attributes = _ref2.attributes;

            console.log(attributes);
            // add enlighterjs related attributes
            return wp.element.createElement(
                'pre',
                {
                    'data-enlighter-language': 'generic',
                    'data-enlighter-theme': 'ddd',
                    className: 'EnlighterJSRAW'
                },
                attributes.content
            );
        }
    };

    // ----------------------------------------------------------------------

    // Register Enlighter Blockcode
    wp.blocks.registerBlockType('enlighter/codeblock', _codeblock);

    // static properties
    var version = '1.0.0';

    exports.version = version;

    return exports;

}({}));
