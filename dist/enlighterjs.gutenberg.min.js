/*! EnlighterJS Syntax Highlighter Gutenberg Plugin 0.3.0 | Mozilla Public License 2.0 | https://enlighterjs.org */
var EnlighterJS_Gutenberg = (function (exports) {
    'use strict';

    // wrapper..

    /*eslint no-undef: 0 */
    var Editor = wp.editor;
    var Components = wp.components;
    var Element = wp.element;
    var Blocks = wp.blocks;

    // ----------------------------------------------------------------------

    // alias
    var _TextEditor = Editor.PlainText;

    // wrapper..

    /*eslint no-undef: 0 */
    var _editorConfig = EnlighterJS_EditorConfig;

    // get list of available themes
    function getThemes() {

        // add default theme (selected globally)
        var themes = {
            '': 'Global settings (' + _editorConfig.config.theme + ')'
        };

        // swap key/values 
        Object.keys(_editorConfig.themes).forEach(function (label) {
            themes[_editorConfig.themes[label]] = label;
        });

        return themes;
    }

    // get list of available languages
    function getLanguages() {
        var languages = {};

        // swap key/values 
        Object.keys(_editorConfig.languages).forEach(function (label) {
            languages[_editorConfig.languages[label]] = label;
        });

        return languages;
    }

    // ----------------------------------------------------------------------

    // create a language selection menu
    function LanguageMenu(_ref) {
        var onChange = _ref.onChange,
            value = _ref.value;


        // get language list
        var languages = getLanguages();

        // generate dropdown list
        var languageItemList = Object.keys(languages).map(function (key) {

            // extract language label
            var label = languages[key];

            return {
                title: label,

                // current item active ?
                isActive: value === key,

                // passthrough
                onClick: function onClick() {
                    return onChange(key);
                }
            };
        });

        // create dropdown menu
        return wp.element.createElement(Components.DropdownMenu, {
            className: 'enlighter-dropdownmenu',
            icon: 'editor-paste-text',
            label: 'Select Language',
            controls: languageItemList
        });
    }

    // ----------------------------------------------------------------------

    // create a language selection menu
    function LanguageSelect(_ref) {
        var onChange = _ref.onChange,
            value = _ref.value;


        // get language list
        var languages = getLanguages();

        // generate dropdown list
        var languageItemList = Object.keys(languages).map(function (key) {

            // extract language label
            var label = languages[key];

            return {
                label: label,
                value: key
            };
        });

        // create dropdown menu
        return wp.element.createElement(Components.SelectControl, {
            label: 'Language',
            value: value,
            onChange: onChange,
            options: languageItemList
        });
    }

    // ----------------------------------------------------------------------

    // create a theme selection menu
    function ThemeSelect(_ref) {
        var onChange = _ref.onChange,
            value = _ref.value;


        // get themes
        var themes = getThemes();

        // generate dropdown list
        var themeItemList = Object.keys(themes).map(function (key) {

            // extract theme label
            var label = themes[key];

            return {
                label: label,
                value: key
            };
        });

        // create dropdown menu
        return wp.element.createElement(Components.SelectControl, {
            label: 'Theme',
            value: value,
            onChange: onChange,
            options: themeItemList
        });
    }

    // ----------------------------------------------------------------------

    // get object key by value
    function getLanguageLabel(key) {
        var langs = getLanguages();

        if (langs[key]) {
            return langs[key];
        } else {
            return 'Unknown language';
        }
    }

    // ----------------------------------------------------------------------

    // The "edit" property must be a valid function.
    function edit(_ref) {
        var attributes = _ref.attributes,
            setAttributes = _ref.setAttributes;


        console.log(attributes);

        // use standard Gutenberg PlainText View with custom styles
        return wp.element.createElement(
            Element.Fragment,
            null,
            wp.element.createElement(
                Editor.BlockControls,
                null,
                wp.element.createElement(
                    Components.Toolbar,
                    null,
                    wp.element.createElement(LanguageMenu, {
                        value: attributes.language,
                        onChange: function onChange(language) {
                            return setAttributes({ language: language });
                        }
                    })
                )
            ),
            wp.element.createElement(
                'div',
                { className: 'enlighter-block-wrapper' },
                wp.element.createElement(
                    'div',
                    { className: 'enlighter-header' },
                    wp.element.createElement(
                        'div',
                        { className: 'enlighter-title' },
                        getLanguageLabel(attributes.language)
                    )
                ),
                wp.element.createElement(_TextEditor, {
                    value: attributes.content,
                    onChange: function onChange(content) {
                        return setAttributes({ content: content });
                    },
                    placeholder: 'Insert Sourcecode..',
                    'aria-label': 'Code'
                }),
                wp.element.createElement(
                    'div',
                    { className: 'enlighter-footer' },
                    wp.element.createElement(
                        'div',
                        { className: 'enlighter-footer-label' },
                        wp.element.createElement(
                            'strong',
                            null,
                            'EnlighterJS'
                        ),
                        ' Syntax Highlighter'
                    )
                )
            ),
            wp.element.createElement(
                Editor.InspectorControls,
                null,
                wp.element.createElement(
                    Components.PanelBody,
                    { title: 'BETA Version', icon: 'megaphone', className: 'enlighter-panel-betarelease' },
                    wp.element.createElement(
                        'p',
                        null,
                        'Please keep in mind that this version of Enlighter Plugin.Gutenberg is still ',
                        wp.element.createElement(
                            'strong',
                            null,
                            'BETA software'
                        ),
                        ' and may have some serious bugs!'
                    ),
                    wp.element.createElement(
                        'p',
                        null,
                        'In case you found a bug, please ',
                        wp.element.createElement(
                            'a',
                            { href: 'https://github.com/EnlighterJS/Plugin.Gutenberg/issues', target: '_new' },
                            'report it on GitHub'
                        ),
                        '.'
                    )
                ),
                wp.element.createElement(
                    Components.PanelBody,
                    { title: 'Appearance', icon: 'admin-appearance' },
                    wp.element.createElement(
                        'p',
                        null,
                        'Override the global plugin settings of the current block.'
                    ),
                    wp.element.createElement(LanguageSelect, {
                        value: attributes.language,
                        onChange: function onChange(language) {
                            return setAttributes({ language: language });
                        }
                    }),
                    wp.element.createElement(Components.TextControl, {
                        label: 'Speciallines',
                        value: attributes.highlight,
                        onChange: function onChange(highlight) {
                            return setAttributes({ highlight: highlight });
                        },
                        placeholder: '1,2,20-22'
                    }),
                    wp.element.createElement(Components.TextControl, {
                        label: 'Lineoffset',
                        value: attributes.lineoffset,
                        onChange: function onChange(lineoffset) {
                            return setAttributes({ lineoffset: lineoffset });
                        },
                        placeholder: '314'
                    }),
                    wp.element.createElement(ThemeSelect, {
                        value: attributes.theme,
                        onChange: function onChange(theme) {
                            return setAttributes({ theme: theme });
                        }
                    }),
                    wp.element.createElement(Components.RadioControl, {
                        label: 'Linenumbers',
                        selected: attributes.linenumbers,
                        options: [{ label: 'Global settings', value: '' }, { label: 'Show', value: 'true' }, { label: 'Hide', value: 'false' }],
                        onChange: function onChange(linenumbers) {
                            return setAttributes({ linenumbers: linenumbers });
                        }
                    })
                ),
                wp.element.createElement(
                    Components.PanelBody,
                    { title: 'Codegroup', initialOpen: false, icon: 'excerpt-view' },
                    wp.element.createElement(
                        'p',
                        null,
                        'Create a group of multiple codeblocks by setting a unique group identifier.'
                    ),
                    wp.element.createElement(Components.TextControl, {
                        label: 'Title',
                        value: attributes.title,
                        onChange: function onChange(title) {
                            return setAttributes({ title: title });
                        },
                        placeholder: 'My Codeblock'
                    }),
                    wp.element.createElement(Components.TextControl, {
                        label: 'Group Identifier',
                        value: attributes.group,
                        onChange: function onChange(group) {
                            return setAttributes({ group: group });
                        },
                        placeholder: 'mygroup-1'
                    })
                )
            )
        );
    }

    // ----------------------------------------------------------------------

    // block element transformation/converting
    var _transforms = {
        from: [

        // allow transform from RAW DOM <pre><code> (legacy syntax highlighting)
        // higher priority then 'core/preformatted'
        // automatically applied when transforming from legacy to blocks
        {
            type: 'raw',
            priority: 4,
            isMatch: function isMatch(node) {
                return node.nodeName === 'PRE' && node.children.length === 1 && node.firstChild.nodeName === 'CODE';
            },
            transform: function transform(node) {
                // use inner text as content
                return Blocks.createBlock('enlighter/codeblock', { content: node.textContent });
            }
        },

        // allow transform from standard EnlighterJS code to blocks
        // higher priority then 'core/preformatted'
        // automatically applied when transforming from legacy to blocks
        // @BUG https://github.com/WordPress/gutenberg/issues/8648
        // @TODO re-enable transform and use attribute matching
        /*
        {
            type: 'raw',
            priority: 4,
            isMatch: function(node){
                return  false;
            },
            transform: function (node){
                // use inner text as content
                return _wp.blocks.createBlock('enlighter/codeblock', {content: node.textContent});
            },
        },
        */

        // allow transform from core/code block
        // allow transform from core/preformatted block
        // allow transform from core/paragraph block
        {
            type: 'block',
            blocks: ['core/code', 'core/preformatted', 'core/paragraph'],
            transform: function transform(_ref) {
                var content = _ref.content;

                return Blocks.createBlock('enlighter/codeblock', { content: content });
            }
        }],

        to: [
        // allow transform to core/code block
        {
            type: 'block',
            blocks: ['core/code'],
            transform: function transform(_ref2) {
                var content = _ref2.content;

                return Blocks.createBlock('core/code', { content: content });
            }
        },

        // allow transform to core/preformatted block
        {
            type: 'block',
            blocks: ['core/preformatted'],
            transform: function transform(_ref3) {
                var content = _ref3.content;

                return Blocks.createBlock('core/preformatted', { content: content });
            }
        }]
    };

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2018 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------

    // @see https://wordpress.org/gutenberg/handbook/block-api/attributes/
    var _attributes = {
        // extract sourcecode from saved (html) content
        content: {
            type: 'string',
            selector: 'pre.EnlighterJSRAW',
            source: 'text'
        },

        // Extract EnlighterJS related attributes
        // use type attribute instead of query for easier handling
        language: {
            type: 'attribute',
            attribute: 'data-enlighter-language',
            default: 'generic'
        },

        theme: {
            type: 'attribute',
            attribute: 'data-enlighter-theme',
            default: ''
        },

        highlight: {
            type: 'attribute',
            attribute: 'data-enlighter-highlight',
            default: ''
        },

        linenumbers: {
            type: 'attribute',
            attribute: 'data-enlighter-linenumbers',
            default: ''
        },

        lineoffset: {
            type: 'attribute',
            attribute: 'data-enlighter-lineoffset',
            default: ''
        },

        title: {
            type: 'attribute',
            attribute: 'data-enlighter-title',
            default: ''
        },

        group: {
            type: 'attribute',
            attribute: 'data-enlighter-group',
            default: ''
        }
    };

    // ----------------------------------------------------------------------

    // Standard Codeblock
    var _codeblock = {

        // metadata
        title: 'Enlighter Sourcecode',
        description: 'Syntax highlighting with EnlighterJS.',
        icon: 'editor-code',
        category: 'formatting',
        keywords: ['code', 'sourcecode', 'enlighter'],

        // internal block state
        attributes: _attributes,

        // block transformations
        transforms: _transforms,

        // extended block support features
        // @see https://wordpress.org/gutenberg/handbook/block-api/#supports-optional
        supports: {
            // no custom classes
            customClassName: false,

            // remove auto generated wrapper classname
            className: false,

            // disable html edit mode
            html: true
        },

        // handle deprecated blocks (previous plugin version)
        // @see https://wordpress.org/gutenberg/handbook/block-api/deprecated-blocks/
        deprecated: [],

        // show editing ui
        edit: edit,

        // render element as html
        // @BUG https://github.com/WordPress/gutenberg/issues/8532
        // @TODO use custom validator 
        save: function render(_ref) {
            var attributes = _ref.attributes;

            // add enlighterjs related attributes
            return wp.element.createElement(
                'pre',
                {
                    className: 'EnlighterJSRAW',
                    'data-enlighter-language': attributes.language,
                    'data-enlighter-theme': attributes.theme,
                    'data-enlighter-highlight': attributes.highlight,
                    'data-enlighter-linenumbers': attributes.linenumbers,
                    'data-enlighter-lineoffset': attributes.lineoffset,
                    'data-enlighter-title': attributes.title,
                    'data-enlighter-group': attributes.group
                },
                attributes.content
            );
        }
    };

    // ----------------------------------------------------------------------

    // Register Enlighter Blockcode
    Blocks.registerBlockType('enlighter/codeblock', _codeblock);

    // static properties
    var version = '0.3.0';

    exports.version = version;

    return exports;

}({}));
